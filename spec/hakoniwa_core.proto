syntax = "proto3";

import "google/protobuf/empty.proto";

package hakoniwa;
option csharp_namespace = "HakoniwaGrpc";

service CoreService {
  //箱庭アセットを登録する
  rpc Register (AssetInfo) returns (NormalReply) {}
  //箱庭アセットを登録解除する
  rpc Unregister (AssetInfo) returns (NormalReply) {}
  
  //箱庭アセットのリストを取得する
  rpc GetAssetList (google.protobuf.Empty) returns (AssetInfoList) {}
  
  //シミュレーションを開始する
  rpc StartSimulation (google.protobuf.Empty) returns (NormalReply) {}
  
  //シミュレーションを終了する
  rpc StopSimulation (google.protobuf.Empty) returns (NormalReply) {}

  //シミュレーション実行状況を取得する
  rpc GetSimStatus (google.protobuf.Empty) returns (SimStatReply) {}

  //シミュレーションを実行開始状態に戻す
  rpc ResetSimulation(google.protobuf.Empty) returns (NormalReply) {}
  
  //シミュレーション時間同期度合いを取得する
  rpc FlushSimulationTimeSyncInfo (SimulationTimeSyncOutputFile) returns (NormalReply) {}

  //箱庭アセット非同期通知
  rpc AssetNotificationStart (AssetInfo) returns (stream AssetNotification) {}
  rpc AssetNotificationFeedback (AssetNotificationReply) returns (NormalReply) {}

  //箱庭シミュレーション時間取得
  rpc NotifySimtime(NotifySimtimeRequest) returns (NotifySimtimeReply) {}
  //箱庭PDUチャネル作成
  rpc CreatePduChannel(CreatePduChannelRequest) returns (CreatePduChannelReply) {}
  //箱庭PDUチャネル購読
  rpc SubscribePduChannel(SubscribePduChannelRequest) returns (SubscribePduChannelReply) {}
}
enum AssetNotificationEvent {
  ASSET_NOTIFICATION_EVENT_START = 0;
  ASSET_NOTIFICATION_EVENT_STOP = 1;
  ASSET_NOTIFICATION_EVENT_RESET = 2;
  ASSET_NOTIFICATION_EVENT_ERROR = 3;
  ASSET_NOTIFICATION_EVENT_HEARTBEAT = 4;
  ASSET_NOTIFICATION_EVENT_NONE = 5;
}
enum ErrorCode {
  ERROR_CODE_OK = 0;
  ERROR_CODE_PERM = 1;
  ERROR_CODE_NOENT = 2;
  ERROR_CODE_INVAL = 3;
  ERROR_CODE_EXIST = 4;
}
enum SimulationStatus {
  STATUS_STOPPED = 0;
  STATUS_RUNNABLE = 1;
  STATUS_RUNNING = 2;
  STATUS_STOPPING = 3;
  STATUS_TERMINATED = 4;
}

message AssetNotification {
  AssetNotificationEvent event = 1;
}
message AssetNotificationReply {
  AssetNotificationEvent event = 1;
  AssetInfo asset = 2;
  ErrorCode ercd = 3;
}
message NormalReply {
  ErrorCode ercd = 1;
}
message SimStatReply {
  ErrorCode ercd = 1;
  SimulationStatus status = 2;
}

message AssetInfo {
  string name = 1;
}

message AssetInfoList {
  repeated AssetInfo assets = 1;
}

message SimulationTimeSyncOutputFile {
	string filepath = 1;
}

message NotifySimtimeRequest {
  AssetInfo asset = 1;
  int64 asset_time = 2;
}

message NotifySimtimeReply {
  ErrorCode ercd = 1;
  int64 master_time = 2;
}

message CreatePduChannelRequest {
  string asset_name = 1;
  int32 channel_id = 2;
  int32 pdu_size = 3;
}

message CreatePduChannelReply {
  ErrorCode ercd = 1;
  int32 master_udp_port = 2;
}

message SubscribePduChannelRequest {
  string asset_name = 1;
  int32 channel_id = 2;
  int32 pdu_size = 3;
  string listen_udp_ip_port = 4;
}
message SubscribePduChannelReply {
  ErrorCode ercd = 1;
}
